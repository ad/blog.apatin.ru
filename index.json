[{"content":"Понаблюдав некоторое время за этим блогом и проанализировав поведение пользователя, я пришел к выводу, что этому сайту достаточно статичного контента. Поиском по сайта за последние 3 года воспользовались пару раз.\nСейчас сайт находится в процессе переезда, не доступен по HTTPS, т.к. для выдачи сертификата необходимо, чтобы DNS-серверы все как один отвечали правильно\u0026hellip; но кэширование мешает. Думаю что в ближайшие часы доедет и сертификат будет выписан.\nХочу написать, какие проблемы возникли в процессе переноса (их немного, но всё же).\n","date":"31.01.2021","href":"https://blog.apatin.ru/p/to-gh-pages/","tags":"техническое ; перемены ; наблюдения","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D1%8B\" class=\"e2-tag\"\u003eперемены\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F\" class=\"e2-tag\"\u003eнаблюдения\u003c/a\u003e \u0026nbsp;\n\n","title":"Переезд на Github Pages"},{"content":"Как опубликовать адрес электронной почты на сайте, не боясь, что в него тут же начнут валиться горы спама?\nВ большинстве случаев эту задачу решают так: вставка адреса картинкой; написание особым способом, который читатели сайта смогут расшифровать (не всегда); форма для ввода текста письма. Разберём плюсы и минусы каждого.\nВставка адреса картинкой [+] большинство ботов не читают тексты с картинки\n[-] оформление картинки нужно как-то вписать в контекст\n[-] картинку нужно хранить и беречь\n[-] не получится создать письмо по нажатию на картинку\nНаписание особым способом [+] скорее всего боты не смогут понять что это адрес электронной почты\n[-] как и некоторые посетители сайта: help 911 (собака) mail com (замените пробелы на точки)\n[-] боты всё же умеют разбирать большинство таких \u0026ldquo;шифровок\u0026rdquo;\nФорма для ввода текста письма [+] ваша почта явно не указана\n[-] форма ввода текста — источник для спама (популярные капчи тоже разгадываются)\n[-] разработка и поддержка формы ввода письма\n[-] люди могут не хотеть писать в некую форму, не зная получит ли нужный человек письмо\nЕсть ли способ замаскировать почту так, чтобы и посетителям было удобно и боты на неё не обращали внимания?\nCloudflare Email Address Obfuscation позволяет подменять адреса на html-страничках таким образом, чтобы они перестали быть понятными ботам.\n [email\u0026nbsp;protected] -\u0026gt; 472f222b37697e7676072a262e2b6924282a\nОткройте исходный код страницы и убедитесь, что там нет адреса электронной почты!\nЕсли интересно как работает этот способ и как сделать аналогичное решение у себя, читайте дальше.\nВ основе лежит шифр Вернама — система симметричного шифрования, изобретённая в 1917 году сотрудником AT\u0026amp;T Гилбертом Вернамом. В нём используется булева функция «Исключающее ИЛИ» (bitwise xor). Шифр Вернама является примером системы с абсолютной криптографической стойкостью. При этом он считается одной из простейших криптосистем.\nДля создания зашифрованной строки: генерируется случайное символ-число(секрет), берется последовательность символов, которые нужно зашифровать и к каждому из них применяется \u0026ldquo;исключающее ИЛИ\u0026rdquo; с секретом.\nРассмотрим на примере выше, как из email получилась такая строка:\n сгенерировали случайное число из диапазона печатных символов ASCII c 65 по 90 символ (A-Z): получилось 71 (это символ G) имеет значение 47 в шестнадцатеричной системе счисления записали 47 в результат затем применили к первой букве шифруемой строки исключающее ИЛИ, символ \u0026ldquo;h\u0026rdquo; имеет код 104, применив к нему XOR и 71 получаем 47, это в шестнадцатеричной системе будет 2f записываем 2f в результат  \u0026hellip; применяем шаги 3 и 4 к оставшимся символам\nХ. получаем 472f222b37697e7676072a262e2b6924282a\nfunc encode(a string) (s string) { b := int64(65 + rand.Intn(35)) s += strconv.FormatInt(b, 16) for _, d := range []rune(a) { r := strconv.FormatInt(b^int64(d), 16) if len(r)%2!=0 { r = \u0026quot;0\u0026quot;+r } s += r } return } Для процесса расшифровки действуем в обратном порядке:\n считываем первые два символа, это будет 47, из которого после преобразования из шестнадцатеричной системы в десятичную получаем 71 — это будет наш ключ считываем следующие два символа, это будет 2f, преобразуем к десятичной системе и получаем 47 применяем к 47 XOR 71, таким образом получаем 104, а это код буквы h считываем следующие два символа, это будет 22, преобразуем к десятичной системе и получаем 34 применяем к 34 XOR 71, таким образом получаем 101, а это код буквы e  \u0026hellip; и так далее.\nfunc decode(a string) (s string) { r, _ := strconv.ParseInt(a[0:2], 16, 0) for n := 4; n \u0026lt; len(a)+2; n += 2 { i, _ := strconv.ParseInt(a[n-2:n], 16, 0) s += string(i ^ r) } return } Остаётся добавить код на страницу и email будет в относительной безопасности:\n\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;\u0026lt;span class=\u0026quot;__email__\u0026quot; data-class=\u0026quot;472f222b37697e7676072a262e2b6924282a\u0026quot;\u0026gt;[email\u0026amp;nbsp;protected]\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; Array.from(document.getElementsByClassName(\u0026quot;__email__\u0026quot;)).forEach( function(l, index, array) { var a = l.getAttribute(\u0026quot;data-class\u0026quot;); if (a) { var s = ''; var r = parseInt(a.substr(0, 2), 16); for (var j = 2; a.length - j; j += 2) { var c = parseInt(a.substr(j, 2), 16) ^ r; s += String.fromCharCode(c); } l.parentNode.href = \u0026quot;mailto:\u0026quot;+s; l.parentNode.innerText = s; } } ); \u0026lt;/script\u0026gt; ","date":"26.04.2020","href":"https://blog.apatin.ru/p/how-cloudflare-protect-email/","tags":"техническое ; go ; cloudflare ; javascript ; email ; Vernam ; шифр","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/go\" class=\"e2-tag\"\u003ego\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/cloudflare\" class=\"e2-tag\"\u003ecloudflare\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/javascript\" class=\"e2-tag\"\u003ejavascript\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/email\" class=\"e2-tag\"\u003eemail\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/vernam\" class=\"e2-tag\"\u003eVernam\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D1%88%D0%B8%D1%84%D1%80\" class=\"e2-tag\"\u003eшифр\u003c/a\u003e \u0026nbsp;\n\n","title":"Как Cloudflare защищает email"},{"content":"Если вам как и мне надоело делать релизы на Github для тех кто хочет попробовать последние изменения в коде, то можно автоматизировать это средствами самого Github, а именно Github Actions.\nСледующий код при коммите создаст (или обновит релиз с именем/тэгом latest) и выложит в него собранные бинарники под linux/os x/arm/windows.\nname: Release on commit or tag on: push: branches: - master - release/* jobs: build: name: Build runs-on: ubuntu-latest steps: - name: Set up Go 1.13 uses: actions/setup-go@v1 with: go-version: 1.13 - name: Check out source code uses: actions/checkout@master - name: Build OS X binary run: GOOS=darwin GOARCH=amd64 go build -o $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2)-darwin64 -a -ldflags '-s -w' . - name: Build Linux binary run: GOOS=linux GOARCH=amd64 go build -o $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2)-linux64 -a -ldflags '-s -w' . - name: Build ARM binary run: GOOS=linux GOARCH=arm GOARM=6 go build -o $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2)-arm -a -ldflags '-s -w' . - name: Build Windows binary run: GOOS=windows GOARCH=amd64 go build -o $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2).exe -a -ldflags '-s -w' . - name: Install olsu run: wget https://github.com/Telling/olsu/releases/download/v0.1.0/olsu-linux-amd64.zip \u0026amp;\u0026amp; unzip olsu-linux-amd64.zip \u0026amp;\u0026amp; chmod +x olsu-linux-amd64 \u0026amp;\u0026amp; pwd \u0026amp;\u0026amp; ls -la - name: Create or update release env: OLSU_TOKEN: ${{ secrets.GITHUB_TOKEN }} OLSU_DELETE_RELEASE: yes run: ./olsu-linux-amd64 -o $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 1) -r $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2) \u0026quot;Latest release\u0026quot; \u0026quot;latest\u0026quot; \u0026quot;Automatic release\u0026quot; $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2)-darwin64 $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2)-linux64 $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2)-arm $(echo $GITHUB_REPOSITORY | cut -d \u0026quot;/\u0026quot; -f 2).exe ","date":"27.09.2019","href":"https://blog.apatin.ru/p/github-actions-go-release/","tags":"техническое ; github ; go","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/github\" class=\"e2-tag\"\u003egithub\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/go\" class=\"e2-tag\"\u003ego\u003c/a\u003e \u0026nbsp;\n\n","title":"Github Actions и автоматическое создание релизов на Go"},{"content":"В последнем путешествии обнаружились пара лайфхаков, которые заметно упростили некоторые моменты… с айфоном, о них немного далее.\nОбычно во время путешествия в стране назначения я брал местную симкарту, отключал лишние потребители трафика и наблюдая за ежедневным расходом трафика ограничивал (или нет) себя.\nВ этом путешествии по Японии нас было двое и прикинув стоимость аренды wifi-модема или двух симкарт было решено взять wifi-модем. Стоимость и разницу называть не буду, уточню только то, что получилось по нашему тарифу 22 ГБ трафика на 12 дней (по итогу мы израсходовали 20 ГБ, немного экономя).\nИтак, первый лайфхак — Low power mode\nТак как в отличие от использования симкарты, для вайфая нельзя ограничить потребителей трафика и обычные уловки с убиранием галочек не особо помогают, этот режим помог не только растянуть время работы батарейки, но и сильно сэкономить потребление трафика за счет отключения iCloud Photo Library, загрузки фоток и видео в облако! Только у меня получилось более 2500 фото/видео, так что если бы не этот режим, то мы вышли бы за лимиты трафика очень быстро (в один день я решил проверить и не отключать и получилось 5 ГБ, при обычных 1.2 ГБ)\nВторой лайфхак — камера\nОчень часто видя какое-то интересное событие, пока достаешь телефон, активируешь камеру, строишь кадр и жмешь на съемку — событие имеет свойство заканчиваться :(\nВ этот раз я действовал иначе, выбрал запись видео на 4к (в настройках камеры можно указать, чтобы камера запоминала последние настройки и тип выбранной съемки) и когда видел интересное событие, после активации камеры сразу начинал запись видео, и во время записи делал фотки.\nКак оказалось, многие не знают что во время записи видео можно делать фотки нажимая на большую белую кнопку на экране. Таким образом, даже если не удавалось успеть сделать фотку, то хотя бы видео было, из которого также можно сделать фотку!\n","date":"24.11.2018","href":"https://blog.apatin.ru/p/iphone_travel_lifehacks/","tags":"iphone ; camera ; travel","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/iphone\" class=\"e2-tag\"\u003eiphone\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/camera\" class=\"e2-tag\"\u003ecamera\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/travel\" class=\"e2-tag\"\u003etravel\u003c/a\u003e \u0026nbsp;\n\n","title":"Лайфхаки для путешествий с айфоном"},{"content":"Месяц мёда!\nПоднимите руку, кто еще так думал?\nСпасибо, вижу ваши руки…\nВот что википедия говорит на этот счёт:\n Выражение «медовый месяц» связано с обрядом изготовления на свадьбу слабоалкогольного пи́тного мёда, который молодые пили на свадебном пиру и в течение тридцати дней после свадьбы. Никаких других, более крепких напитков им пить не разрешалось.\n  Мёд вручался молодым в день свадьбы — это был бочонок весом около 5–10 кг, который полагалось освободить за месяц. По старинной технологии пи́тный мёд готовился не один год и при невысоких температурах. Полученный напиток давал бодрость, веселье и умиротворение без одурманивания.\n В русском языке слово «Месяц» чаще встречается в качестве описания периода и я тоже считал что это значит что после свадьбы нужно целый месяц предаваться сладостным моментам.\nОднако, в английском языке это звучит как honey moon, на французком lune de miel, honigmonat по-немецки, в каждом случае подразумевается луна, а периодичность фаз луны равна примерно месяцу (29.5 дней).\nТаким образом, получается что месяц после свадьбы молодожены посвящены себе.\n","date":"06.11.2018","href":"https://blog.apatin.ru/p/honeymoon/","tags":"наблюдения","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F\" class=\"e2-tag\"\u003eнаблюдения\u003c/a\u003e \u0026nbsp;\n\n","title":"Медовый месяц"},{"content":"    img.lazy { display: none; }    ","date":"31.10.2018","href":"https://blog.apatin.ru/p/halloween_2018/","tags":"halloween","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/halloween\" class=\"e2-tag\"\u003ehalloween\u003c/a\u003e \u0026nbsp;\n\n","title":"Halloween"},{"content":"Чтобы вместо ввода пароля для sudo прикладывать палец к TouchID нужно отредактировать файл\nsudo nano /etc/pam.d/sudo добавив второй строкой:\nauth sufficient pam_tid.so    img.lazy { display: none; }       img.lazy { display: none; }   ","date":"22.02.2018","href":"https://blog.apatin.ru/p/osx_terminal_touchid_sudo/","tags":"OS X ; terminal ; TouchID ; sudo","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/os-x\" class=\"e2-tag\"\u003eOS X\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/terminal\" class=\"e2-tag\"\u003eterminal\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/touchid\" class=\"e2-tag\"\u003eTouchID\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/sudo\" class=\"e2-tag\"\u003esudo\u003c/a\u003e \u0026nbsp;\n\n","title":"sudo через TouchID/Apple Watch в OS X"},{"content":"Когда проектируешь масштабируемые системы, где приходится обращаться ко множеству внешних компонент, например, использование стороннего API, отправка почты или конвертация видео, лучшим способом реализации является асинхронная модель с системой очередей, которая является связующим звеном для взаимодействия всех компонент системы…\nСамой популярной системой очередей в Python является Celery, она обладает широким набором возможностей по управлению задачами.\nК сожалению, сложные системы на базе Celery сложно поддерживать в работоспособном состоянии и когда что-то идёт не так, то найти проблему бывает весьма не просто. Можете спросить любого девопса об опыте работы с Celery, но будьте готовы услышать не очень приятные слова.\nК счастью, есть альтернативное решение и сейчас я расскажу о нём.\nОсновным отличием от Celery является то, что не нужно использовать дополнительные компоненты (сам Celery и хранилище, например Redis), таким образом количество точек отказа уменьшается на две. В качестве хранилища задач может использоваться директория, внешняя директория или сетевой пул.\nДля управления Python программами мы часто используем uWSGI.\nПочему?\nПотому что он прост в настройке, очень надежен, очень гибок, выполняет большинство требований.\nКроме обслуживания Python-кода в виде обеспечения непрерывного доступа к web-приложению, в uWSGI входит компонент Spooler, который реализует систему очередей.\nSpooler имеет некоторые особенности, а документация по нему достаточно скудна.\nИспользовать uWSGI Spooler просто, как раз-два-три!\nНо есть несколько нюансов.\nМодуль uwsgi нельзя импортировать из кода, а соответственно тестировать из консоли код не получится, необходимо каждый раз запускать uwsgi воркера, для чего необходимо создать конфиг.\n[uwsgi] socket = /var/run/mysite.sock master = True processes = 4 project_dir = /home/myuser/mysite chdir = %(project_dir) spooler = /var/uwsgi_spools/mysite_spool spooler-import = path.to.spool.package # (package to\u0026amp;nbsp;import spool file) spooler-frequency = 10 # Frequency for scanning spool max-requests = 5000 module = wsgi: application touch-reload = wsgi.py файл воркера\nfrom uwsgidecorators import spool, uwsgi @spool def my_func (args): print (args) # do\u0026amp;nbsp;some job Постановка задачи из вашего кода\nimport uwsgi_spools.mysite_spool as\u0026amp;nbsp;mysite_spool mysite_spool.my_func.spool(test=True) Как можно убедиться из примера, порог вхождения для использования очень низкий.\nВнутри таска доступен один аргумент, который содержит словарь с тремя служебными ключами (имя функции ud_spool_func, имя таска spooler_task_name, статус таска ud_spool_ret) и всеми параметрами, что были переданы при создании таска, в примере это ключ test.\nТаск может вернуть три статуса:\n -2 (SPOOL_OK) — таск выполнен, будет удалён из очереди -1 (SPOOL_RETRY) — что-то пошло не так, таск будет повторно вызван 0 (SPOOL_IGNORE) — игнорировать таск  Особенность, декоратор @spool выполняется единожды (возвращает SPOOL_OK), если функция не упала с исключением. Для для того чтобы управлять жизненным циклом нужно использовать @spoolraw.\nОсобые ключи (вспомогательные) при создании таска:\n spooler — абсолютный путь к спулеру, который будет выполнять задачу at — unix time, когда задача должна быть выполнена (правильнее сказать, она не будет выполнена ранее этого значения) priority — указывает на подпапку в папке задач (на такую подпапку можно выделить большее количество воркеров), через \u0026ndash;spooler-ordered можно настроить приоритеты body — этот ключ используется для значений более 64 КБ, в задачу будет доступен в сериализованном виде  Кроме декоратора @spool доступен декоратор @timer, который принимает количество секунд в качестве аргумента и позволяет выполнять декорируемую функцию с указанным интервалом.\n@timer(30) def my_func (args): print (args) # do\u0026amp;nbsp;some job every 30 sec Аналогично @timer есть декоратор @spoolforever, который будет повторно запускать выполнение функции (завершение задачи со статусом SPOOL_RETRY).\n@spoolforever def my_func (args): print (args) # do\u0026amp;nbsp;some job and repeat Для настройки воркеров для работы по сети, нужно добавить адрес, по которому он будет доступен в ini-файл\nsocket = 127.0.0.1:10001 При создании задачи указывать адрес получателя задачи\nuwsgi.send_message(\u0026quot;127.0.0.1:10001\u0026quot;, 17, 0, test=True, 5) # или uwsgi.spool (test=True, spooler=\u0026quot;127.0.0.1:10001\u0026quot;) Таким образом, uWSGI Spooler можно использовать как замену очередям, но если всё же не хватает возможностей или хочется немного сахара, то можно использовать uwsgi-tasks, реализующий недостающее.\n","date":"13.04.2017","href":"https://blog.apatin.ru/p/uwsgi-spooler/","tags":"техническое ; код ; uwsgi ; spooler","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4\" class=\"e2-tag\"\u003eкод\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/uwsgi\" class=\"e2-tag\"\u003euwsgi\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/spooler\" class=\"e2-tag\"\u003espooler\u003c/a\u003e \u0026nbsp;\n\n","title":"The uWSGI Spooler"},{"content":"Установка apt-get update apt-get upgrade apt-get install postgresql Смена пароля пользователя su postgres psql alter user postgres password '...'; ","date":"12.12.2016","href":"https://blog.apatin.ru/p/postgres_install/","tags":"техническое ; postgres ; ubuntu ; debian","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/postgres\" class=\"e2-tag\"\u003epostgres\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/ubuntu\" class=\"e2-tag\"\u003eubuntu\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/debian\" class=\"e2-tag\"\u003edebian\u003c/a\u003e \u0026nbsp;\n\n","title":"Установка и настройка PostgresQL"},{"content":"Очень часто бывает, что фронтенд-разработчику необходимо добавить или изменить функционал сайта, но нет возможности получить его dev-версию, на которую можно повлиять. Обычно это пытаются обойти запуском браузера с отключенной безопасностью, но не всегда это помогает.\nЯ расскажу как при работе с «чёрным ящиком» иметь возможность воздействать на его ответы, а также как решать проблемы связанные с безопасностью.\nСобираем nginx c необходимыми модулями Для этого нам понадобится nginx и несколько вспомогательных модулей для него:\n Module ngx_headers_more, модуль для замены заголовков. Почему не использовать add_header, спросите вы, потому что он добавляет заголовок, даже если он уже был.\n Module ngx_http_sub_module, позволит нам подменить строки в ответе источника.\nСборка Для ubuntu собрать nginx ну очень просто, поэтому опишу как это сделать под OS X.\nsudo mkdir -p /usr/local/src cd /usr/local/src pcre можно поставить из brew или собрать самостоятельно\nsudo wget http://ftp.cs.stanford.edu/pub/exim/pcre/pcre-8.38.tar.gz sudo tar xzvf pcre-8.38.tar.gz cd pcre-8.38 sudo ./configure --prefix=/usr/local sudo make \u0026amp;\u0026amp; sudo make install \u0026amp;\u0026amp; sudo make clean cd . sudo wget http://nginx.org/download/nginx-1.10.0.tar.gz sudo wget https://github.com/openresty/headers-more-nginx-module/archive/v0.30rc1.tar.gz sudo tar xzvf nginx-1.10.0.tar.gz sudo tar xzvf v0.30rc1.tar.gz cd\u0026amp;nbsp;nginx-1.10.0 sudo./configure --prefix=/usr/local --with-http_sub_module --add-module=/usr/local/src/headers-more-nginx-module-0.30rc1 sudo make \u0026amp;\u0026amp; sudo make install \u0026amp;\u0026amp; sudo make clean nano ~/.bash_profile export PATH=\u0026quot;/usr/local/sbin: $PATH\u0026quot; . ~/.bash_profile Здесь показана сборка без поддержки SSL, поэтому не получится работать с сайтами, которые работают только по HTTPS.\nПроверяем работоспособность nginx sudo nginx -t Конфиг nginx будет лежать по этому пути /usr/local/conf/nginx.conf\nРелоад конфига выполняется\nsudo nginx -s reload Nginx готов, можно приступать! Предположим, мы хотим повлиять на vk.com\nПропишем наш тестовый домен:\nsudo nano /etc/hosts 127.0.0.1 test.vk.com Начнём писать наш конфиг. Чтобы было сложнее запутаться, сделаем конфиг в виде инклюдов. В итоге, наш конфиг будет выглядеть как:\nsite.conf — в котором будет общее описание сайта и инклюды следующих частей\nproxy_site.conf — здесь мы опишем какая часть запросов пойдёт на сам сайт, а какая будет завернуть к нам\nproxy_api.conf — тут будут настройки проксирования для api, если нужно\nheaders.conf — заголовки для подмены, отключим все лишнее, что возвращает backend\nsub_filter.conf — список замен для данных, которые будет возвращать backend\nзатем, редактируем /usr/local/conf/nginx.conf\nдобавляем в конец секции http путь до нашего основного инклюда\ninclude /Users/{USERNAME}/nginx_test/site.conf;\nЗатем, меняем /Users/{USERNAME}/nginx_test/site.conf;\nкоторый в свою очередь описывает какой домен мы будем обрабатывать\nserver { listen 80; server_name \u0026amp;nbsp;test.vk.com; include /Users/{USERNAME}/nginx_test/proxy_site.conf; include /Users/{USERNAME}/nginx_test/sub_filter.conf; include /Users/{USERNAME}/nginx_test/headers.conf; } Сделаем проксипасс до нужного сервера в /Users/{USERNAME}/nginx_test/proxy_site.conf;\nlocation / { proxy_set_header Accept-Encoding \u0026quot;\u0026quot;; # это важный параметр, если его не указать, то для gzip сайтов не будет работать замена proxy_pass http://vk.com; } Для примера покажу, как сделать так, чтобы про браузер не знал про vk.com и думал, что он теперь test.vk.com\nзатем редактируем /Users/{USERNAME}/nginx_test/sub_filter.conf;\nsub_filter \u0026lsquo;vk.com\u0026rsquo; \u0026lsquo;test.vk.com\u0026rsquo;; # указыват, какую строку и на что мы заменяем (с версии nginx 1.9.4 можно делать замену разных строк дублируя вызов этой команды)\nsub_filter_once off; # говорит, что нужно сделать несколько замен, а не только одну sub_filter_types *; # для каких типов документов выполнять замену, по умолчанию только для html sub_filter_last_modified on; # менять заголовок, если была произведена замена Подмена домена, на который ставится кука proxy_cookie_domain \u0026lsquo;vk.com\u0026rsquo; \u0026lsquo;test.vk.com\u0026rsquo;;\nЗаголовки ответа сервера Осталось подменить заголовки, влияющие на безопасность, редактируем /Users/{USERNAME}/nginx_test/headers.conf;\nmore_clear_headers 'Access-Control-*'; # можем удалить заголовки из ответа more_set_headers 'Access-Control-Allow-Origin: http://test.vk.com'; # или поменять их ","date":"26.04.2016","href":"https://blog.apatin.ru/p/nginx_for_frontenders/","tags":"техническое ; код ; nginx ; frontend","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4\" class=\"e2-tag\"\u003eкод\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/nginx\" class=\"e2-tag\"\u003enginx\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/frontend\" class=\"e2-tag\"\u003efrontend\u003c/a\u003e \u0026nbsp;\n\n","title":"nginx for frontenders"},{"content":"Установка apt-get install monit Мониторинг PostgreSQL check process postgres with pidfile /var/postgres/postmaster.pid group database start program = \u0026quot;/etc/init.d/postgresql start\u0026quot; stop program = \u0026quot;/etc/init.d/postgresql stop\u0026quot; if failed host 127.0.0.1 port 5432 protocol pgsql then restart Мониторинг nginx check process nginx with pidfile /var/run/nginx.pid start program = \u0026quot;/etc/init.d/nginx start\u0026quot; stop program = \u0026quot;/etc/init.d/nginx stop\u0026quot; group www-data (for ubuntu, debian) ","date":"29.12.2015","href":"https://blog.apatin.ru/p/monit/","tags":"техническое ; postgres ; nginx ; monit","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/postgres\" class=\"e2-tag\"\u003epostgres\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/nginx\" class=\"e2-tag\"\u003enginx\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/monit\" class=\"e2-tag\"\u003emonit\u003c/a\u003e \u0026nbsp;\n\n","title":"Настройка Monit для поддержания жизни nginx/postgresql"},{"content":"Первым делом скачиваем актуальную версию sudo apt-get update sudo apt-get install git git clone https://github.com/letsencrypt/letsencrypt cd letsencrypt mkdir -p /etc/letsencrypt/webrootauth Настраиваем nginx на то, чтобы он мог ответить на проверку принадлежности сервера владельцу сертификата\nnano /etc/nginx/sites-enabled/default  server { listen 0.0.0.0:80; location /.well-known/acme-challenge { alias /etc/letsencrypt/webrootauth/.well-known/acme-challenge; location ~ /.well-known/acme-challenge/(.*) { add_header Content-Type application/jose+json; } } } Перезапускаем nginx /etc/init.d/nginx reload ./letsencrypt-auto --renew-by-default -a webroot --webroot-path /etc/letsencrypt/webrootauth --text --agree-tos -d ваш.домен --email Почта@владельца.сертификата auth Настраиваем nginx на работу с сертификатами cd /etc/nginx openssl dhparam -out dhparam.pem 2048 nano /etc/nginx/sites-enabled/default\u0026lt;/p\u0026gt; server { listen 443 ssl; listen [::]:443 ssl; ssl_certificate /etc/letsencrypt/live/ваш_домен/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/ваш_домен/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/ваш_домен/chain.pem; ssl_session_timeout 1d; ssl_session_cache shared:SSL:10m; ssl_dhparam /etc/nginx/dhparam.pem; ssl_protocols TLSv1.1 TLSv1.2; ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK'; ssl_prefer_server_ciphers on; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; resolver 8.8.8.8 8.8.4.4 valid=86400; resolver_timeout 10; ... } Проверяем конфигурацию и перезапускаем nginx nginx -t /etc/init.d/nginx reload\u0026lt;/p\u0026gt; Настраиваем автоматическое обновление сертификатов /root/letsencrypt/letsencrypt renew \u0026gt;\u0026gt; /dev/null 2\u0026gt;\u0026amp;1; /etc/init.d/nginx reload ","date":"17.11.2015","href":"https://blog.apatin.ru/p/letsencrypt_nginx/","tags":"техническое ; letsencrypt ; nginx","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/letsencrypt\" class=\"e2-tag\"\u003eletsencrypt\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/nginx\" class=\"e2-tag\"\u003enginx\u003c/a\u003e \u0026nbsp;\n\n","title":"Let’s Encrypt SSL Certificates и Nginx"},{"content":"Часто бывает, что после того как внесешь изменения в pg_hba.conf нужно сделать рестарт, чтобы изменения вступили в силу. Оказывается, можно не делать, а выполнить:\n# pg_ctl reload или\nSELECT pg_reload_conf(); ","date":"25.09.2015","href":"https://blog.apatin.ru/p/postgresql_reload/","tags":"техническое ; postgres","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/postgres\" class=\"e2-tag\"\u003epostgres\u003c/a\u003e \u0026nbsp;\n\n","title":"Postgresql reload"},{"content":"Иногда нужно добавить логирование изменений в некоторых таблицах, для этого приходится городить сложную систему, которая будет отслеживать изменения и записывать в нужное место что поменялось, и есть большой риск забыть добавить логирование в каком-то месте, эту проблему можно изящно решить сделав триггер на изменение таблицы.\nСоздаем таблицу, в которой будут храниться изменения:\nCREATE TABLE history ( id serial, tstamp timestamp DEFAULT now(), schemaname text, tabname text, operation text, who text DEFAULT current_user, new_val json, old_val json, item_id int8 ); Создаем функцию, которая будет записывать изменения:\nCREATE OR REPLACE FUNCTION change_trigger() RETURNS trigger AS $$ BEGIN IF TG_OP = 'INSERT' THEN INSERT INTO history (tabname, schemaname, operation, new_val, item_id) VALUES (TG_RELNAME, TG_TABLE_SCHEMA, TG_OP, row_to_json(NEW), NEW.id); RETURN NEW; ELSIF TG_OP = 'UPDATE' THEN INSERT INTO history (tabname, schemaname, operation, new_val, old_val, item_id) VALUES (TG_RELNAME, TG_TABLE_SCHEMA, TG_OP, row_to_json(NEW), row_to_json(OLD), NEW.id); RETURN NEW; ELSIF TG_OP = 'DELETE' THEN INSERT INTO history (tabname, schemaname, operation, old_val, item_id) VALUES (TG_RELNAME, TG_TABLE_SCHEMA, TG_OP, row_to_json(OLD), OLD.id); RETURN OLD; END IF; END; $$ LANGUAGE 'plpgsql' SECURITY DEFINER; Вешаем триггер на нужные таблицы:\nCREATE TRIGGER tablename_trigger BEFORE INSERT OR UPDATE OR DELETE ON tablename FOR EACH ROW EXECUTE PROCEDURE change_trigger(); ","date":"26.05.2015","href":"https://blog.apatin.ru/p/postgres_logging_trigger/","tags":"техническое ; код ; полезное ; postgres ; logging ; trigger","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4\" class=\"e2-tag\"\u003eкод\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D0%B5\" class=\"e2-tag\"\u003eполезное\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/postgres\" class=\"e2-tag\"\u003epostgres\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/logging\" class=\"e2-tag\"\u003elogging\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/trigger\" class=\"e2-tag\"\u003etrigger\u003c/a\u003e \u0026nbsp;\n\n","title":"Логирование изменений в Postgresql"},{"content":"В Postgres можно сделать, чтобы при создании записи какому-то параметру автоматически присваивалось значение:\nALTER TABLE table_name ADD COLUMN \u0026quot;updated\u0026quot; timestamp NULL DEFAULT now(); В данном примере, мы добавляем параметр updated, который при создании записи будет равен времени её создания.\nНо что, если нам нужно обновлять этот параметр при каждом изменении записи? Можно делать SET updated=now(), но в каком-то из запросов можно забыть сделать это и поле останется не обновлённым.\nНа помощь приходят триггеры, вот например, создаем функцию, которая будет выставлять значение поля updated равное текущему времени:\nCREATE OR REPLACE FUNCTION update_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated = now(); RETURN NEW; END; $$ language 'plpgsql'; А вот так создадим сам триггер, который перед обновлением записи будет вызывать функцию:\nCREATE TRIGGER **table_name**_updated BEFORE UPDATE ON **table_name** FOR EACH ROW EXECUTE PROCEDURE update_column(); ","date":"25.05.2015","href":"https://blog.apatin.ru/p/postgres_update_trigger/","tags":"техническое ; код ; полезное ; postgres","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4\" class=\"e2-tag\"\u003eкод\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D0%B5\" class=\"e2-tag\"\u003eполезное\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/postgres\" class=\"e2-tag\"\u003epostgres\u003c/a\u003e \u0026nbsp;\n\n","title":"Автоматическое обновление поля в PostgreSQL"},{"content":"Хотелось бы рассказать про две программки, которые сильно упрощают жизнь, когда имеется много фотографий, которые нужно повернуть и изменить размер: jhead и sips\nsips — стандартная утилита OS X, scriptable image processing system. Кроме прочего, умеет изменять размер картинки по максимальной стороне.\n jhead — Exif Jpeg header manipulation tool. Удобна для поворота картинки по данным EXIF. Для её работы нужен libjpeg (brew install libjpeg).\n$ mkdir 1024 # создаем папку для готовых картинок $ jhead -autorot source_images/* # поворачиваем картинки $ sips -Z 1024 source_images/* --out 1024/ # изменяем размер ","date":"26.06.2014","href":"https://blog.apatin.ru/p/osx_autorotate_and_resize/","tags":"photos ; resize ; OS X","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/photos\" class=\"e2-tag\"\u003ephotos\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/resize\" class=\"e2-tag\"\u003eresize\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/os-x\" class=\"e2-tag\"\u003eOS X\u003c/a\u003e \u0026nbsp;\n\n","title":"OS X: поворот и ресайз фотографий"},{"content":"Может быть я один такой, но похожие жалобы слышал от знакомых.\nСуть в том, что когда пользуешься 2 и более устройствами на iOS и делаешь заметки на обоих, то в какой-то момент замечаешь, что заметка (приложение Notes или Заметки) пропала\u0026hellip; Или, она есть на одном устройстве, но её нет на другом. В то же время эта заметка может быть на одном из устройств и отсутствовать на icloud.com или наоборот. Ясно что имеется какая-то проблема с синхронизацией.\nСовсем недавно случилось так, что мой iPhone при подводной съемке рыбок и прочей живности набрался воды и пришел в коррозирующую негодность.\nСпустя некоторое время мне понадобилась заметка, которую я писáл на iPhone и был уверен, что она должна была через iCloud синхронизироваться, но увы\u0026hellip; заметка пропала.\nЧто же делать? Потерпев неделю и практически простившись с ценными заметками я решил восстановить iPad из резервной копии iPhone. Но после восстановления список заметок на iPad оказался пуст.\nОкончательно смирившись, я обратно восстановил резервную копию iPad и, о чудо, заметки с iPhone оказались на iPad!\nИтого Последовательность действий:\nСделать резервную копию(iCloud) на устройстве, где заметок нет. Сделать полный сброс настроек и приложений. Восстановить из резервной копии устройства, где заметки есть. Сделать полный сброс настроек и приложений. Восстановить из резервной копии, сделанной в начале для самого устройства.\n","date":"18.05.2014","href":"https://blog.apatin.ru/p/icloud_lost_notes/","tags":"apple ; icloud","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/apple\" class=\"e2-tag\"\u003eapple\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/icloud\" class=\"e2-tag\"\u003eicloud\u003c/a\u003e \u0026nbsp;\n\n","title":"Восстановление \"пропавших\" заметок iCloud"},{"content":"Как спать так, чтобы высыпаться — я давно начал задумываться, как так получается, что ложась спать в одно время — в какое-то время встать очень просто, а например на полчаса раньше очень тяжело, оказывается это легко объяснимо!\nМеханика сна Тут всё достаточно просто :) Состоит из 5 последовательных стадий:\n Первая стадия — стадия медленного сна, которая длится 5−10 минут. Вторая стадия — неглубокий или лёгкий сон, длится около 20 минут. Во время этой стадии легче всего просыпаться. Третья стадия — медленный сон, занимает 10−15 минут. Четвертая стадия — самый глубокий медленный сон, занимает 20−30 минут. В это время человека очень сложно разбудить, и именно на этой стадии человек видит сны. Пятая стадия — быстрый сон, длится 10−15 минут. Если во время этой стадии разбудить человека, то почти наверняка он в подробностях сможет рассказать об увиденном сновидении. Но слишком часто прерывать быстрый сон не нужно, могут возникнуть расстройства психики.  Таким образом, получаем что цикл сна занимает примерно от часа до полутора часов и можно выяснить для себя какое время занимает этот цикл. На самом деле, в зависимости от ритма жизни, цикл сна может быть и меньше (у меня какое-то время было 40−45 минут).\nДля здорового сна необходимо 4−8 часов, но это очень индивидуально.\n Как засыпать Примерно за пару часов до сна желательно избежать приема стимуляторов, например кофеина, который содержится в чае и кофе, а также сократить количество употребляемого сахара. Перед сном лучше всего избегать ярких источников света (телевизор, монитор и особенно мобильные девайсы), потому что они «будят» мозг. Полезным будет подышать свежим воздухом, например, проветрить комнату или прогуляться перед сном.\nЕсли знаешь время, когда нужно вставать и уже известна продолжительность цикла сна, то можно подгадать время, во сколько лучше всего засыпать.\n Как просыпаться Проснувшись утром, чтобы легче встать хорошо помогает потянуться, сделать несколько глубоких вдохов-выдохов.\nНе стóит «долёживать» ещё 5 минуточек, за это время «довыспаться» всё равно не удастся, а вот проспать нужное время легко (не забываем про циклы сна).\n Советы Очень полезно вставать в одно и тоже время, даже по выходным и в отпуске. Когда просыпаешься каждый день в одно время, то можно не включать будильник, организм и так будет знать когда пора просыпаться.\nПомощники Если трудно самостоятельно вычислить продолжительность цикла сна или, например, присутствуют раздражители в виде домашних питомцев, которые могут в течении ночи будить, то можно использовать Sleep Tracker\u0026rsquo;ы, которые определяют фазу сна и будят в ближайшее подходящее время (когда установлен будильник), можно задать ± промежуток времени от заданного будильником. Попробовав несколько я остановился на Smart Alarm(не сочтите за рекламу, приложений подобных много, но это мне понравилось больше прочих), кроме основной задачи (легкого пробуждения) он позволяет задать звук/мелодию для приятного засыпания и пробуждения. Кроме того, он ведет статистику, строит графики по тому, как спалось :)\n","date":"18.05.2014","href":"https://blog.apatin.ru/p/how_to_sleep/","tags":"sleep","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/sleep\" class=\"e2-tag\"\u003esleep\u003c/a\u003e \u0026nbsp;\n\n","title":"Как спать так, чтобы высыпаться"},{"content":"Многие гики обожают закапываться в какую-то проблему с головой, перерывая горы информации в поисках решения — доставляет удовольствие сам процесс добывания.\nОчень частая история из моей практики выглядит так: обрисовывается задача вида \u0026ldquo;нужно сделать это и это используя это и вот это\u0026rdquo;, тот кто будет делать задачу не задает уточняющих вопросов и уходит \u0026ldquo;делать задачу\u0026rdquo;, считая что ему всё понятно.\nПри постановке задачи есть понимание пути, который нужно пройти для достижения результата, примерной скорости и соответственно время выполнения задачи примерно понятно.\nЧто происходит в процессе? Человек смотрит на задачу в целом, ищет чем бы интересным из этой задачи ему хотелось занять себя\u0026hellip; Находит это и занимается. Время идёт. Человек решает, а вот неплохо бы сэкономить потраченное время и найти готовое решение, ведь как мы знаем, почти все задачи уже решались до нас, и находит что-то похожее на его задачу.\nОн уже забыл про то что обговаривались инструменты и методы решения, зачем, ведь есть уже готовое. В процессе \u0026ldquo;приладки\u0026rdquo; оказывается, что какая-то часть не работает или в целом не получается сделать то что нужно, тут начинаются поиски компромисса, как бы так побыстрее на коленке накостылять рабочий вариант. В ход идёт гугл, стэковерфлоу и даже иногда документация или метод научного тыка. Время всё идёт.\nПора бы остановиться Да-да, пора бы остановиться и посмотреть на изначальную задачу, перечитать её, понять о чем она и наконец-то пойти задать вопросы, рассказав о том, что не получилось в процессе. Время ещё есть.\nКак нужно делать Не нужно браться за выполнение задачи без понимания результата и шагов для достижения цели. Надеясь, что в процессе придет решение и всё получится — просто теряешь время.\nПеред началом процесса задачу нужно разбить на более мелкие задачи, отсортировать их по тому, как одна зависит от другой. После этого взяться за первую не выполненную и доделать не прыгая влево-вправо к более интересным делам. Таким образом в каждый момент времени будет завершенная часть, а не \u0026ldquo;куча всего недоделанного\u0026rdquo;.\nЕсли в процессе возникают проблемы, которые не понимаешь как решить и документация не помогает, то гораздо лучше подойти к кому-нибудь, кто может знать ответ и просто спросить у него, скорее всего он обоснованно подскажет куда смотреть или где прочитать (в этом нет ничего позорного, никто не может знать всего).\n","date":"15.03.2014","href":"https://blog.apatin.ru/p/dontdoit/","tags":"work ; people","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/work\" class=\"e2-tag\"\u003ework\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/people\" class=\"e2-tag\"\u003epeople\u003c/a\u003e \u0026nbsp;\n\n","title":"Как не надо делать"},{"content":"Обожаю самолёты.\nОчень нравится их вид и та скорость (Санкт-Петербург — Таллин всего за 35 минут), с которой они доставляют грузы (в том числе и людей). Люблю их комфорт и удобство!\nМногие знают, что от выбора места в самолете зависит то, как пройдет путешествие. Постараюсь поделиться своими наблюдениями.\nЯ предпочитаю места у аварийного выхода, потому что там максимальное свободное пространство перед местом впереди. Почти всегда можно выбрать место заранее (на сайте авиакомпании-перевозчика) за сутки или за 23 часа или же попросить такое место при чекине (но для этого придется приехать в аэропорт пораньше, что я делать не люблю и об этом напишу ниже).\nЕсли мест у аварийного выхода нет, можно попытаться найти места поближе к выходам, это позволит сэкономить время при посадке и высадке. В больших самолетах их обычно 2.\nЯ предпочитаю ездить без багажа (хотя бы по дороге в ту сторону), потому что это позволяет экономить время на чекине (если нет багажа, то можно зачекиниться у стойки самостоятельно и идти на посадку) и в конце полёта. Но есть хитрость как взять с собой больше вещей и не сдавать их в багаж. Хитрость в том, что кроме сумки, которая подходит по размерам для багажной полки в самолёте (а эта сумка или чемодан достаточно вместительные) с собой можно взять «сумку для ноутбука», в которую у меня помещается почти столько же сколько и в чемодан.\nЕдинственное что мне не нравится в самолётах — необходимость приезжать в аэропорт заранее, за 2+ часа. Обусловлено это тем, что очень плохо организован процесс регистрации, досмотра и посадки в самолёт. Во многих аэропортах досмотр и осмотр вещей производится по 3 раза, при этом по пути в ту сторону могут с легкостью не найти нож-открывашку для вина или бенгальские огни, а по пути в обратную сторону очень ругаться на этот счёт (при этом нож возвращают, но просят так не делать). Так вот, приехав в аэропорт заранее оказываешься в ситуации, что у тебя есть практически два часа свободного времени, за которое почти всегда успевают сменить ворота выхода и задержать самолёт еще минут на 40. При этом завершая посадку строго за 40 минут до вылета, не давая зачекиниться на стыковочный рейс, ты видишь самолёт, но туда уже не пускают, хотя самолёт стоИт еще час!\nВ последнее время развИлось умение засыпать еще на взлёте, что позволяет неплохо скоротать время в полёте и как раз проснуться к «кормить будут» :) Скорее всего лёгкость засыпания связана с изменением давления на взлёте и общему спокойствию к происходящему.\nВо время полёта очень рекомендую томатный сок, вкус его меняется на высоте, становится более полным относительно других соков. А из пищи не советую «особые наборы», которые можно заказать при бронирования билета, вроде диетических, кошерных и т.д., на вкус они совсем не очень.\nСтоить отметить стойки паспортного контроля, я выбираю те, где в очереди меньше всего детей и парные стойки, они значительно быстрее остальных. Также, на стойках паспортного контроля стОит говорить поменьше, а то на каждый развернутый ответ зададут еще по два вопроса.\nЕсть еще много мыслей про самолёты, напишу про них в следующий раз :)\n","date":"02.01.2014","href":"https://blog.apatin.ru/p/about_airplanes/","tags":"полезное ; самолёты ; наблюдения","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D0%B5\" class=\"e2-tag\"\u003eполезное\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D1%81%D0%B0%D0%BC%D0%BE%D0%BB%D1%91%D1%82%D1%8B\" class=\"e2-tag\"\u003eсамолёты\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F\" class=\"e2-tag\"\u003eнаблюдения\u003c/a\u003e \u0026nbsp;\n\n","title":"Про самолёты"},{"content":"Мне очень понравилась статья 20 советов как привести жизнь в порядок и я решил на её основе написать свою версию. Вот что получилось у меня:\n  Обувь. Раньше я использовал несколько пар обуви. Обувь для бега, для прогулок, обувь на каждый день, несколько пар обуви для костюмов. Теперь, я сократил их до трёх — кроссовки(я предпочитаю высокие) ботинки и обувь для спорта. В каждой из этой обуви мне максимально удобно.\n  Одежда. У меня достаточно много одежды, я даже не знаю всей, что есть. Порой покупаешь новую рубашку/футболку. Проходит время и находишь в шкафу пакет с одеждой, которую купил и даже ни разу не надевал. Следует избавиться от старой изношенной одежды, просто вынести её к мусорному баку и положит рядом, она кому-то нужнее.\n  Программы. Когда-то я удалял все ненужные программы с компьютера, которые были установлены при покупке, они просто занимали место на диске и в памяти, но никогда не использовались. Был свой набор программ под каждую задачу. С переходом на OS X количество программ сильно уменьшилось, я как-нибудь напишу обзор тех программ, которыми пользуюсь каждый день.\n  Рабочий стол. Мне нравится, когда стол чистый. На нём только ноутбук. Ничего больше. На работе вы также можете иметь монитор, клавиатуру, мышку и телефон, блокнот, пара ручек. Никаких стопок бумаг, коробок и прочего. Только нужные вещи.\n  Гаджеты. Мы продолжаем покупать множество гаджетов, постоянно выходят новые девайсы и хочется обладать всеми ими. Я периодически раздаю те, чем давно не пользуюсь родным и друзьям, кому, как мне кажется они могут быть нужны.\n  Спортивный инвентарь. Если вы как и любите играть в различные игры на природе, то у вас есть множество спортивных \u0026ldquo;игрушек\u0026rdquo;. Но порой, они есть, но не используются, такие вещи лучше раздать друзьям. У меня два мяча для американского футбола (второй в полтора раза меньший, чтобы играть с девушками) и есть мяч для волейбола, за почти три года воспользовались им один раз всего.\n  Кошелек. Я использую его для того чтобы носить в нем пару банковских карт, проездной на транспорт, накопительную карту на бензин, водительские права, немного денег, скидочную карту на продукты и пару визиток. Несколько лет назад я уменьшил количество того, что есть в кошельке и теперь он занимает совсем мало место, легко помещаясь в карман рубашки. Многие мои знакомые носят сумки, чтобы сохранить все чеки за последние пару лет, билетики на трамвай и\u0026hellip; я не знаю что И, но у девушек такие же сумки, но они готовы к концу света.\n  Ноутбук. Это был трудный путь. У меня было несколько ноутбуков и десктопов. Мне нравилось устанавливать и играться с разными дистрибутивами Linux. Теперь я остановился на Mac OS X для дома (на Mac mini) и для работы (MacBook Pro retina). Это лучший вариант, который позволяет просто делать дела, не думая как это сделать. Просто работает.\n  Транспорт. Если вам реально не нужно несколько средств передвижения — от них лучше избавиться. Старые автомобили требуют много времени и средств для поддержания их в рабочем состоянии. В больших городах гораздо дешевле пользоваться общественным транспортом для повседневных нужд и такси для особых случаев. В пределах района вполне подойдет велосипед или роликовые коньки.\n  Книги. У моих родителей много книг, на самом деле много. Я предпочитаю читать книги на Kindle или iPad (kindle) или iPhone (когда не дома). Почему? Удобная синхронизация всех книг, места чтения каждой книги, закладок, шеринг понравившихся отрывков в социальных сетях, возможность отправить книгу другу.\n  Фото и видео. Раньше я хранил фото на внешнем диске и копию в iPhoto. Но совсем недавно я ухитрился сделать dd не на тот диск и резервная копия iPhoto \u0026ldquo;стала бесполезной\u0026rdquo;, а резервный диск был очень стар и он отлично справлялся с записью данных, но не с чтением их. Теперь я храню фото и видео во В Контакте и Облачном Хранилище Selectel (позже я напишу что там хорошего).\n  Документы. Я больше не храню документы на локальных дисках. Все мои документы создаются и хранятся в Google Docs. Потому что это просто, удобно и доступно. Часто нужно подредактировать документ вместе с кем-то или поделиться им — google docs как ничто другое помогает в этом. К тому же там есть история правок.\n  Электронная почта. Я использую 3 почты: рабочая (пересылка всей почты на личную после фильтрации), личная и прочая (почта на своем домене). С рабочей все просто, там выделяются письма с логами и кладутся в свои папки, вся прочая почта отправляется на личную. В личной почте у меня около полусотни фильтров, вся почта разбирается ими, некоторая автоматически помечается прочитанной и помещается в архив. Прочая почта используется для всего остального, например, для регистраций. При регистрации на каком-то ресурсе я создаю почту вида habrahabr.ru@mail.tld, которая определяет сервис, на котором регистрируюсь.\n  Камеры. Я использую 3 камеры в зависимости от задач. Основная iPhone, для ситуаций, когда ему может не повезти выжить — GoPro 2, для художественного фото Sony NEX 5N, к которой у меня имеется 7 объективов (4 оригинальных, 2 старых фикса и один странный от CCTV). Вообще-то, при должной тренировке достаточно и одного IPhone, но иногда просто хочется \u0026ldquo;покрутить\u0026rdquo; грип ;-) Пожалуй, это единственное, что является избыточным, но к сожалению, пока не придумали объектив 9-800 mm со светосилой 1.1 :(\n  Дела. Для планирования не рабочих дел я использую три инструмента. Первый — блокнот, сначала записываю всё подряд в Notes на iPhone, затем переписываю большие дела в бумажный блокнот, а быстрые и просто задачи в Reminders на iPhone или google calendar для напоминающий и удобного отображения планов на месяц/неделю/день. Интересной фишкой Reminders является то, что оно позволяет сделать уведомление по геопозиции, например, можно сделать уведомление для списка покупок в тот момент, когда окажешься у строительного магазина.\n  RSS. Я знаю, многие из вас ежедневно посещают различные сайты для того, чтобы почитать новости, убить время за просмотром ржак и прочим, но давным давно придумали RSS. Вы можете сохранить кучу времени, просматривая обновления, когда у вас есть время, не тратя его на повторный заходы на \u0026ldquo;ваши любимые фишки, япы, вк\u0026rdquo; при этом, синхронизируя состояния просмотра между устройствами. Это реально экономит время. У меня подписка на примерно 400 \u0026ldquo;сайтов\u0026rdquo; и я с комфортом могу про смотреть всё интересное по пути с работы или пока просыпаюсь утром за завтраком. Интересное можно добавить в избранное или удобно поделиться.\n  Английский. Когда уже есть некоторая база по грамматике и выучено достаточное количество слов, одним из лучших способов дальнейшего обучения (когда не находишься в стране, где можно легко общаться на английском), является просмотр сериалов без русского перевода. Сначала можно смотреть с субтитрами на русском, потом на английском, потом совсем отключить их. Вы будете удивлены, как произносятся многие слова на самом деле. Вторым способом обучения является \u0026ldquo;перевод\u0026rdquo; внутреннего голоса на английский, попробуйте :)\n  Путешествия. Со временем, я решил начинать путешествие почти без багажа. Всё что может понадобиться помещается в сумку. Это позволяет экономить уйму времени и сил. На самом деле, большинство вещей, которые вы с собой берете — так и не достаются из чемодана.\n  Домашние дела. Я предпочитаю не заниматься домашними делами, они делают сами себя. Посудомойка моет посуду, стиральная машина стирает, робот-пылесос поддерживает чистоту. Дела делаются сами, на них практически не нужно тратить время и силы.\n  Спорт. Профессиональных спортсменов я не понимаю, но физические упражнения полезны не только для тела, но и для разума. Во время физических занятий можно легко посмотреть на некоторые задачи с другой стороны. Я предпочитаю ходьбу и греблю.\n  Подведя итог, всё это нужно, чтобы упростить жизнь, избавиться от лишнего, отвлекающего и не дающего сосредоточиться на целях. Упрощая проще добиться результата. Упрощая жизнь легче жить.\n","date":"08.10.2013","href":"https://blog.apatin.ru/p/advices/","tags":"life","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/life\" class=\"e2-tag\"\u003elife\u003c/a\u003e \u0026nbsp;\n\n","title":"Как упростить свою жизнь"},{"content":"Расскажу о новом iPhone 5S\nКакие основные отличия от предыдущей модели?\nИх не так уж и мало, как может показаться на первый взгляд и они значительные.\nКамера Она стала действительно лучше, особенно это заметно при съемке при недостаточном освещении.\nИзменился размер точки c 1.4µm на 1.5µm (больше — лучше), а также увеличилась диафрагма (f/2.2 вместо f/2.4). Улучшилась и светочувствительность на 33%.\nТеперь при \u0026ldquo;зажатии\u0026rdquo; кнопки съёмки iPhone делает серию снимков (10 кадров в секунду) и выбирает из них лучший, таким образом съёмка движущихся объектов становится простой задачей.\nВ предыдущих версиях iPhone была одна вспышка, в iPhone 5S добавили вторую янтарного цвета, назвали это True Tone. Нужна она для того, чтобы температура снимка была наиболее близкой к реальности, iPhone подбирает силу свечения каждой из них в зависимости от освещенности кадра.\nЕщё одним нововведением стал режим Slo-mo, который позволяет снимать видео на 120 fps. После съемки можно выбрать область, которая будет замедлена, но к сожалению только одну. Пример видео и ещё один.\nTouchID Не знаю, как я раньше мог пользовать без этого.\nНастолько удобной разблокировки не видел ни у одного другого устройства.\nПросто нажимаешь на Home и удерживаешь секунду — устройство разблокировано!\nЭто невозможно недооценить особенно при использовании в автомобиле, где достаточно проблематично вводить код разблокировки, особенно тем, у кого \u0026ldquo;не 4 простых цифры\u0026rdquo;.\nПо-умолчанию можно \u0026ldquo;запомнить\u0026rdquo; 5 отпечатков пальцев, но если постараться, то получится и 25. Для этого, при добавлении нового отпечатка нужно касаться каждым пальцем пока iPhone не будет доволен.\nПроцессор A7 Процессор в новом 5S сделали 64bit, его частота 1,3 ГГц, 2 ядра, и использует новейшую архитектуру ARM v8. Новые ядра Apple называются Cyclone, а произведены они Samsung с помощью 28 нм процесса.\nОбъем оперативной памяти в 5S остался прежним – 1 Гб, но в данном случае это более быстрая версия LPDDR3.\nЗдесь сложно судить об изменениях, по скорости у меня и на iPhone 5 не было проблем, поэтому тут нареканий нет.\nВ новом процессоре Apple добавила сопроцессор M7, который умеет работать с сенсорами движения, такими как: акселерометр, гироскоп и компас. Для чего они вынесли это в отдельную сущность? В первую очередь, чтобы уменьшить энергопотребление.\nВ том числе, в этом сопроцессоре хранятся данные TouchID.\nLTE В iPhone 5S добавили поддержку частот LTE, которая позволит работать ему в Росии (7 и 38), но только в модели A1530 (у меня A1497). Пока что попробовать нет возможности, нужно подождать пока Apple \u0026ldquo;позволит\u0026rdquo; российским операторам начать предоставлять услуги LTE. Вероятнее всего, произойдет это в декабре вместе с официальным стартом продаж в России.\nИтог Не смотря на появление множества улучшений и нововведений, особого смысла менять iPhone 5 на 5S нет.\n","date":"27.09.2013","href":"https://blog.apatin.ru/p/iphone5s/","tags":"apple ; iphone","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/apple\" class=\"e2-tag\"\u003eapple\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/iphone\" class=\"e2-tag\"\u003eiphone\u003c/a\u003e \u0026nbsp;\n\n","title":"iPhone 5S"},{"content":"Для меня уже очень давно стало привычкой синхронизировать данные на разных устройствах между собой. Когда-то я записывал файлы на дискетки, чтобы перенести копию, потом появились CD-RW и флешки, но случалось так, что в процессе транспортировки или хранения данные могли повредиться.\nШло время и появился Dropbox, как же с ним стало удобно! Создал файл на одном устройстве и почти сразу же этот файл доступен на другом, сохранил изменения и они применены сразу во всех копиях!\nУ Dropbox был только один минус, он был платным, плата бралась за занятое место на их серверах, сверх бесплатного объёма. При помощи всяких бонусов, квестов и ухищрений можно было расширить количество доступного места (мне удалось добиться 39Gb), но этого было мало. К тому же и скорость синхронизации стала довольно маленькой для хоть сколько-нибудь ощутимых объёмов, для папки в 10Gb могло потребоваться до 24 часов.\nКазалось бы, есть альтернативы — тот же Яндекс.Диск или Selectel Storage, но хотелось удобства и не зависеть от сторонних сервисов. Мне не требовалось резервное копирование данных на серверы какой-то компании, необходима только синхронизация.\nАльтернатива есть! Это BitTorent Sync от компании, которая сделала µTorrent.\nЧто же он умеет:\n Автоматически синхронизировать неограниченное количество и объём файлов; Возможность создавать Read-only синхронизации; Для синхронизации не требуется «белый IP»; Все данные передаются зашифрованными и получить доступ к ним может только владелец секретного ключа, данные не сохраняются на промежуточных серверах; При отсутствии интернета и необходимости синхронизации по локальной сети не возникнет проблем; Многоплатформенность: MacOS X, Linux(+Android), Windows; Версионирование файлов и синхронизация удалённых файлов; Это бесплатно.  26.08.2013 вышла версия Bittorent Sync для IOS (ссылка в AppStore), которая позволяет, кроме обычной синхронизации, синхронизировать фотографии из галереи IOS!\n","date":"07.08.2013","href":"https://blog.apatin.ru/p/btsync/","tags":"программы ; btsync ; полезное ; ios","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D1%8B\" class=\"e2-tag\"\u003eпрограммы\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/btsync\" class=\"e2-tag\"\u003ebtsync\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D0%B5\" class=\"e2-tag\"\u003eполезное\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/ios\" class=\"e2-tag\"\u003eios\u003c/a\u003e \u0026nbsp;\n\n","title":"Про BitTorrent Sync (BTSync)"},{"content":"Возникла идея сделать увеличитель ссылок, антипод укорачивателю ссылок.\nКак это выглядит, например, пользователь не может гордиться длиной своей ссылки и тут сервис приходит на помощь:\n short.domain.tld/path/subpath/standartfile.php\n ↓\n s.h.o.r.t.d.o.m.a.i.n.t.l.d.lo.ng/p_a_t_h/s_u_b_p_a_t_h/s_t_a_n_d_a_r_t_f_i_l_e_p_h_p\n upd. всё уже придумано :)\n","date":"06.08.2013","href":"https://blog.apatin.ru/p/enlarger/","tags":"ром и пепсикола ; юмор","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%80%D0%BE%D0%BC-%D0%B8-%D0%BF%D0%B5%D0%BF%D1%81%D0%B8%D0%BA%D0%BE%D0%BB%D0%B0\" class=\"e2-tag\"\u003eром и пепсикола\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D1%8E%D0%BC%D0%BE%D1%80\" class=\"e2-tag\"\u003eюмор\u003c/a\u003e \u0026nbsp;\n\n","title":"Удлинитель ссылок"},{"content":"Совсем недавно я наткнулся на интересную статью про то как организовать список задач в блокноте. Обычно я просто записываю заголовки задач и вычеркиваю по мере завершения, но порой такой список становится невозможно читать, так как не понятно что произошло с задачей, она выполнена или просто вычеркнута.\nАвтор статьи предлагает маркировать задачи символами на основе минуса «—» дорисовывая его, тем самым изменять статус задачи. Предлагается 6 вариантов состояния:\n Задача не выполнена, это начальное состояние задач; Задача выполнена, дорисовываем вертикальную линию после выполнения задачи; Ожидание, делаем стрелку вправо. Задача отложена или ждёт выполения других задач; Делегирована, рисуем стрелку влево и дописываем кому назначено и дату; Заметка, изменяем минус на треугольник, преобразуем задачу в напоминание (мне кажется, что это избыточный пункт, но может пригодиться); Задача перенесена, обводим минус в круг, этот статус говорит, что задачу мы перенесли в другой список задач (необходим комментарий о причине).  Красота и простота этого способа организации задач на бумаге очевидна, запутаться достаточно сложно и при этом список задач получается очень наглядным. Изменение статуса производится легко и без особой грязи на бумаге.\n","date":"31.07.2013","href":"https://blog.apatin.ru/p/tasks/","tags":"задачи ; полезное","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B8\" class=\"e2-tag\"\u003eзадачи\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D0%B5\" class=\"e2-tag\"\u003eполезное\u003c/a\u003e \u0026nbsp;\n\n","title":"Про задачи, способ ±"},{"content":" Rust — это экспериментальный язык программирования, разрабатываемый Mozilla Research. Основная задача Rust — быть удобным языком для написания больших клиент-серверных приложений, работающих в сети Интернет. Такое позиционирование привело к возникновению набора функциональности с акцентом на безопасность, контролем за использованием памяти и параллельным выполнением задач. Производительность приложения на Rust должна быть сравнимой с производительностью C++ приложений. Выдержка из Википедии\n Синтаксис Rust похож на C/C++ с блоками разделенными фигурными скобками и операторами такими как if, else, do, while и for.\nА теперь вольный перевод хорошей, хотя и немного старой статьи A Quick Look at the Rust Programming Language.\nЯзык Rust включает в себя следующие особенности:  Безопасное управление памятью. Нет Null pointer, wild pointer и т.д. автоматическое управление памятью. Контроль за мутабельностью. Объекты неизменяемые по умолчанию. Нет общих изменяемым состояний между задачами. Динамическая безопасность выполнения. Явное управление памятью. Очень легкие задачи (сопрограммы) как в Erlang, таски общаются передавая сообщения друг другу, передача данных возможна без копирования. Стек итераторы (фактически лямбда-блоки без выделения памяти в куче). Статические, родные компиляции (ELF / PE / Mach-O). Простой интерфейс для кода на C (переключатель стеков и вызовов). Multi-парадигмы. Чисто функциональный, императивно-процедурный. Функции первого класса с динамическим связываением Структурно-типизированные объекты (без номинальных типов или иерархии типов). Multi-платформенный(Windows, Linux, OSX). Поддержка UTF8. Работает с существующими тулчейнами (GDB / Valgrind / Shark / и т.д.).  Реализация Rust и библиотек для него пока что находится в процессе разработки.\nЕсть два Rust компилятора в различных стадиях развития:\nrustboot— написан на O\u0026rsquo;Caml со своим собственным x86 бэкендом генерации кода.\nrustc— компилятор, написанный на Rust и запускается при помощи rustboot. Генерация кода осуществляется с использованием LLVM. rustboot может быть использован для написания программ на Rust. rustc все еще находится в интенсивной разработке, и только самые основные вещи работают.\nЗаключение Rust интересный и многообещающий язык с большими планами на будущее. В отличие от NodeJS он имеет гораздо большие шансы на то, чтобы изменить методы разработки клиент-серверного ПО для интернет.\n","date":"30.07.2013","href":"https://blog.apatin.ru/p/rust/","tags":"техническое ; код ; rust","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4\" class=\"e2-tag\"\u003eкод\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/rust\" class=\"e2-tag\"\u003erust\u003c/a\u003e \u0026nbsp;\n\n","title":"Язык Rust"},{"content":"Riak — это документно-ориентированная база данных с поддержкой HTTP, JSON, REST.\nНа основе Riak можно реализовать полноценный проект с CMS, поддержкой пользователей и загрузкой файлов.\nВозможности  Хранение объектов Ссылки(связи) между объектами Использование в качестве кэша Map/reduce, distributed grep Отказоустойчивость Поиск  Особенности Хранение данных распределенно на серверах (но при большом(50 и более) количестве узлов ребалансировка занимает много времени)\nПример использования Предположим, вам нужно создать форму для опроса с возможностью прикрепления файлов.\nНа Riak это сделать быстро и просто — немного времени, HTML и Javascript.\nБлагодаря тому, что Riak поддерживает REST — добавление записи и загрузку файла сделать очень легко.\nНапример, сохраняем заполненную форму:\n(\u0026lt;form id=”form”...) $.ajax({ url: '/riak/testbucket', type: 'POST', contentType: 'application/json; charset=utf-8', data: JSON.stringify($('#form').serializeArray()), dataType: 'json', success: function(data, textStatus, request){ path = request.getResponseHeader('Location').split('/').pop(-1); } }); Если не указывать ключ, по которому сохранять данные, то Riak создаст запись со случайным ключем и вернет его значение в поле Location заголовка ответа.\nСохраняем файл:\n(\u0026lt;input type=”file” id=”fileinput”...) var files = $('#fileinput').prop('files'); if (files.length \u0026gt; 0) { var file = files[0]; var url = '/riak/testbucket-files/'+path; var xhr = new XMLHttpRequest(); xhr.open('POST', url, true); xhr.setRequestHeader('Content-Type', file.type); xhr.send(file); } Получаем список сохраненных записей (ключей):\n$.ajax({ url: \u0026quot;/riak/testbucket?props=false\u0026amp;keys=true\u0026quot; }).done(function ( data ) { // result here data = {keys: []} }); В Riak можно хранить и раздавать не только картинки, но и другие файлы, например можно положить индексный HTML-файл, который будет делать запросы к данным и выводить их для пользователей, достаточно при загрузке указать\nContent-Type: text/html Таким образом, для создания полноценного портала достаточно только Riak и Nginx(для управления правами на доступ).\nТонкости Отсутствие данных о времени создания ключа, может вызывать неудобство, но есть информация о времени последнего изменения ключа.\nТак как Riak — документно-ориентированная база данных, то в ней нет схемы, это с одной стороны позволяет добиться гибкости, но в то же время, нужно следить за структурой данных.\n","date":"30.07.2013","href":"https://blog.apatin.ru/p/riak/","tags":"техническое ; riak ; код","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5\" class=\"e2-tag\"\u003eтехническое\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/riak\" class=\"e2-tag\"\u003eriak\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4\" class=\"e2-tag\"\u003eкод\u003c/a\u003e \u0026nbsp;\n\n","title":"Riak — как универсальное решение"},{"content":"Комментариев в блоге не будет, во всяком случае пока.\nЯ долго думал, каким образом делать комментарии и делать ли вообще.\nОпишу все три варианта:\n Свои комментарии — всё хорошо, но нужно заставлять пользователя авторизовываться и хранить его данные авторизации; Виджет — из плюсов то, что вероятнее всего пользователь имеет регистрацию в одной из систем, которую поддерживает виджет (В Контакте, Фейсбук, Twitter, OpenID и т.д.), но большинство виджетов платные и к тому же их внешний вид нельзя настроить под себя; Нет комментариев — плохо что их нет, но большинство не читает комментарии к постам или же читает посты в приложениях, которые не подтягивают комментарии.  Пока что я выбрал третий вариант :)\nНо вы всегда можете написать мне по почте, в твиттер(ссылки добавлю чуть позже) и т.д. ;-)\nЧуть не забыл, добавил popline (jquery-плагин), попробуйте выделить текст на страничке!\n","date":"29.07.2013","href":"https://blog.apatin.ru/p/about_comments/","tags":"ром и пепсикола ; комментарии ; социальное","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D1%80%D0%BE%D0%BC-%D0%B8-%D0%BF%D0%B5%D0%BF%D1%81%D0%B8%D0%BA%D0%BE%D0%BB%D0%B0\" class=\"e2-tag\"\u003eром и пепсикола\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%BC%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%80%D0%B8%D0%B8\" class=\"e2-tag\"\u003eкомментарии\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D1%81%D0%BE%D1%86%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5\" class=\"e2-tag\"\u003eсоциальное\u003c/a\u003e \u0026nbsp;\n\n","title":"Про комментарии"},{"content":" Не только разрушать, но и созидать\n Когда-то давным-давно прочитанная фраза, я думаю, будет уместно начать с неё :)\nЯ очень люблю почитать интересные технические статьи, написанные живым языком. В свою очередь, в этом блоге я постараюсь писать посты, которые будут кому-то интересны :)\nСуществует огромное количество разных движков для блогов и каждый из них решает свою часть задач, мне не удалось найти ни одного, который бы понравился настолько, чтобы выбрать именно его, и я решил написать свой.\nДля реализации выбрал то, что хорошо знаю: Flask+Jinja2, Postgresql.\nХочу заметить, что первая версия (то что есть на данный момент) была написана на 99% на iPad в текстовом редакторе Textastic. До этого я как-то не пробовал писать код на iPad, но оказалось очень даже удобно. Textastic понравился тем, что: умеет режим работы без сети, можно пользоваться когда нет подключения к интернет, умеет подсветки синтаксиса, нет проблем с юникодом, умеет SFTP и закачку/загрузку групп файлов и папок.\nЧто же удалось сделать в блоге за два вечера: список постов, отдельный пост, список тегов, выбор постов по тэгу, поиск по постам, скрытые посты и зачатки админки.\n","date":"27.07.2013","href":"https://blog.apatin.ru/p/start/","tags":"ниачом ; программы ; ром и пепсикола","tagsHTML":"\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BD%D0%B8%D0%B0%D1%87%D0%BE%D0%BC\" class=\"e2-tag\"\u003eниачом\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D1%8B\" class=\"e2-tag\"\u003eпрограммы\u003c/a\u003e \u0026nbsp;\n\n\u003ca href=\"https://blog.apatin.ru/t/%D1%80%D0%BE%D0%BC-%D0%B8-%D0%BF%D0%B5%D0%BF%D1%81%D0%B8%D0%BA%D0%BE%D0%BB%D0%B0\" class=\"e2-tag\"\u003eром и пепсикола\u003c/a\u003e \u0026nbsp;\n\n","title":"Вступительная запись"}]