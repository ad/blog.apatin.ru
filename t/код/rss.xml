<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Weblog</title><link>https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4/</link><description>Личный блог с мыслями и наблюдениями</description><managingEditor>rss@apatin.ru Daniel Apatin</managingEditor><webMaster>rss@apatin.ru Daniel Apatin</webMaster><copyright>Daniel Apatin</copyright><lastBuildDate>Thu, 13 Apr 2017 10:46:00 +0300</lastBuildDate><atom:link href="https://blog.apatin.ru/t/%D0%BA%D0%BE%D0%B4/rss.xml" rel="self" type="application/rss+xml"/><item><title>The uWSGI Spooler</title><link>https://blog.apatin.ru/p/uwsgi-spooler/</link><pubDate>Thu, 13 Apr 2017 10:46:00 +0300</pubDate><author>rss@apatin.ru (Daniel Apatin)</author><guid>https://blog.apatin.ru/p/uwsgi-spooler/</guid><description>
&lt;p>Когда проектируешь масштабируемые системы, где приходится обращаться ко множеству внешних компонент, например, использование стороннего API, отправка почты или конвертация видео, лучшим способом реализации является асинхронная модель с системой очередей, которая является связующим звеном для взаимодействия всех компонент системы…&lt;/p>
&lt;p>Самой популярной системой очередей в Python является Celery, она обладает широким набором возможностей по управлению задачами.&lt;/p>
&lt;p>К сожалению, сложные системы на базе Celery сложно поддерживать в работоспособном состоянии и когда что-то идёт не так, то найти проблему бывает весьма не просто. Можете спросить любого девопса об опыте работы с Celery, но будьте готовы услышать не очень приятные слова.&lt;/p>
&lt;p>К счастью, есть альтернативное решение и сейчас я расскажу о нём.&lt;/p>
&lt;p class="foot">&lt;a href="https://blog.apatin.ru/p/uwsgi-spooler/">Читать далее&lt;/a>&lt;/p></description></item><item><title>nginx for frontenders</title><link>https://blog.apatin.ru/p/nginx_for_frontenders/</link><pubDate>Tue, 26 Apr 2016 11:37:00 +0300</pubDate><author>rss@apatin.ru (Daniel Apatin)</author><guid>https://blog.apatin.ru/p/nginx_for_frontenders/</guid><description>
&lt;p>Очень часто бывает, что фронтенд-разработчику необходимо добавить или изменить функционал сайта, но нет возможности получить его dev-версию, на которую можно повлиять. Обычно это пытаются обойти запуском браузера с отключенной безопасностью, но не всегда это помогает.&lt;/p>
&lt;p>Я расскажу как при работе с «чёрным ящиком» иметь возможность воздействать на его ответы, а также как решать проблемы связанные с безопасностью.&lt;/p>
&lt;p class="foot">&lt;a href="https://blog.apatin.ru/p/nginx_for_frontenders/">Читать далее&lt;/a>&lt;/p></description></item><item><title>Логирование изменений в Postgresql</title><link>https://blog.apatin.ru/p/postgres_logging_trigger/</link><pubDate>Tue, 26 May 2015 12:59:00 +0300</pubDate><author>rss@apatin.ru (Daniel Apatin)</author><guid>https://blog.apatin.ru/p/postgres_logging_trigger/</guid><description>
&lt;p>Иногда нужно добавить логирование изменений в некоторых таблицах, для этого приходится городить сложную систему, которая будет отслеживать изменения и записывать в нужное место что поменялось, и есть большой риск забыть добавить логирование в каком-то месте, эту проблему можно изящно решить сделав триггер на изменение таблицы (весь исходный код доступен на
&lt;a href="https://gist.github.com/ad/24b606793aa73e8fd5bf1fe4a89c9507" target="_blank" rel="nofollow">github&lt;/a> или можно скопировать нажав на кнопку).&lt;/p>
&lt;p class="foot">&lt;a href="https://blog.apatin.ru/p/postgres_logging_trigger/">Читать далее&lt;/a>&lt;/p></description></item><item><title>Автоматическое обновление поля в PostgreSQL</title><link>https://blog.apatin.ru/p/postgres_update_trigger/</link><pubDate>Mon, 25 May 2015 23:57:00 +0300</pubDate><author>rss@apatin.ru (Daniel Apatin)</author><guid>https://blog.apatin.ru/p/postgres_update_trigger/</guid><description>
&lt;p>В Postgres можно сделать, чтобы при создании записи какому-то параметру автоматически присваивалось значение:&lt;/p>
&lt;pre>&lt;code>ALTER TABLE table_name ADD COLUMN &amp;quot;updated&amp;quot; timestamp NULL DEFAULT now();
&lt;/code>&lt;/pre>
&lt;p class="foot">&lt;a href="https://blog.apatin.ru/p/postgres_update_trigger/">Читать далее&lt;/a>&lt;/p></description></item><item><title>Язык Rust</title><link>https://blog.apatin.ru/p/rust/</link><pubDate>Tue, 30 Jul 2013 23:38:00 +0300</pubDate><author>rss@apatin.ru (Daniel Apatin)</author><guid>https://blog.apatin.ru/p/rust/</guid><description>
&lt;blockquote>
&lt;p>Rust — это экспериментальный язык программирования, разрабатываемый Mozilla Research. Основная задача Rust — быть удобным языком для написания больших клиент-серверных приложений, работающих в сети Интернет. Такое позиционирование привело к возникновению набора функциональности с акцентом на безопасность, контролем за использованием памяти и параллельным выполнением задач. Производительность приложения на Rust должна быть сравнимой с производительностью C++ приложений.
&lt;em>Выдержка из Википедии&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Синтаксис Rust похож на C/C++ с блоками разделенными фигурными скобками и операторами такими как if, else, do, while и for.&lt;/p>
&lt;p>А теперь вольный перевод хорошей, хотя и немного старой статьи
&lt;a href="http://bluishcoder.co.nz/2011/03/31/a-quick-look-at-the-rust-programming-language.html" target="_blank" rel="nofollow">A Quick Look at the Rust Programming Language&lt;/a>.&lt;/p>
&lt;p class="foot">&lt;a href="https://blog.apatin.ru/p/rust/">Читать далее&lt;/a>&lt;/p></description></item><item><title>Riak — как универсальное решение</title><link>https://blog.apatin.ru/p/riak/</link><pubDate>Tue, 30 Jul 2013 10:40:00 +0300</pubDate><author>rss@apatin.ru (Daniel Apatin)</author><guid>https://blog.apatin.ru/p/riak/</guid><description>
&lt;p>Riak — это документно-ориентированная база данных с поддержкой HTTP, JSON, REST.&lt;/p>
&lt;p>На основе Riak можно реализовать полноценный проект с CMS, поддержкой пользователей и загрузкой файлов.&lt;/p>
&lt;h2 id="возможности">Возможности&lt;/h2>
&lt;ul>
&lt;li>Хранение объектов&lt;/li>
&lt;li>Ссылки(связи) между объектами&lt;/li>
&lt;li>Использование в качестве кэша&lt;/li>
&lt;li>Map/reduce, distributed grep&lt;/li>
&lt;li>Отказоустойчивость&lt;/li>
&lt;li>Поиск&lt;/li>
&lt;/ul>
&lt;p class="foot">&lt;a href="https://blog.apatin.ru/p/riak/">Читать далее&lt;/a>&lt;/p></description></item></channel></rss>